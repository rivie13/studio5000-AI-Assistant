{
  "methods": {
    "add_event_handler": {
      "name": "add_event_handler",
      "class_name": "LogixProject",
      "description": "LogixProject method: add_event_handler(self, OperationEvent handler)",
      "parameters": [
        {
          "name": "handler",
          "type": "OperationEvent",
          "description": "Parameter: handler"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "General",
      "signature": "add_event_handler(self, OperationEvent handler)"
    },
    "build": {
      "name": "build",
      "class_name": "LogixProject",
      "description": "LogixProject method: build(self, RequestedBuildTarget target=RequestedBuildTarget.DEFAULT_TARGET)",
      "parameters": [
        {
          "name": "target=RequestedBuildTarget.DEFAULT_TARGET",
          "type": "RequestedBuildTarget",
          "description": "Parameter: target=RequestedBuildTarget.DEFAULT_TARGET"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Project Management",
      "signature": "build(self, RequestedBuildTarget target=RequestedBuildTarget.DEFAULT_TARGET)"
    },
    "change_controller_mode": {
      "name": "change_controller_mode",
      "class_name": "LogixProject",
      "description": "LogixProject method: change_controller_mode(self, RequestedControllerMode mode)",
      "parameters": [
        {
          "name": "mode",
          "type": "RequestedControllerMode",
          "description": "Parameter: mode"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Controller Operations",
      "signature": "change_controller_mode(self, RequestedControllerMode mode)"
    },
    "change_controller_type": {
      "name": "change_controller_type",
      "class_name": "LogixProject",
      "description": "LogixProject method: change_controller_type(self, str processor_type_name)",
      "parameters": [
        {
          "name": "processor_type_name",
          "type": "str",
          "description": "Parameter: processor_type_name"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Controller Operations",
      "signature": "change_controller_type(self, str processor_type_name)"
    },
    "clear_event_handlers": {
      "name": "clear_event_handlers",
      "class_name": "LogixProject",
      "description": "LogixProject method: clear_event_handlers(self)",
      "parameters": [],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "General",
      "signature": "clear_event_handlers(self)"
    },
    "close": {
      "name": "close",
      "class_name": "LogixProject",
      "description": "LogixProject method: close(self)",
      "parameters": [],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Project Management",
      "signature": "close(self)"
    },
    "convert": {
      "name": "convert",
      "class_name": "LogixProject",
      "description": "LogixProject method: convert(str project_path, int destination_revision, OperationEvent|list[OperationEvent]|None operation_events=None)",
      "parameters": [
        {
          "name": "project_path",
          "type": "str",
          "description": "Parameter: project_path"
        },
        {
          "name": "destination_revision",
          "type": "int",
          "description": "Parameter: destination_revision"
        },
        {
          "name": "operation_events=None",
          "type": "OperationEvent|list[OperationEvent]|None",
          "description": "Parameter: operation_events=None"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "General",
      "signature": "convert(str project_path, int destination_revision, OperationEvent|list[OperationEvent]|None operation_events=None)"
    },
    "create_new_project": {
      "name": "create_new_project",
      "class_name": "LogixProject",
      "description": "LogixProject method: create_new_project(str project_file_path, int major_revision, str processor_type_name, str controller_name, OperationEvent|list[OperationEvent]|None operation_events=None)",
      "parameters": [
        {
          "name": "project_file_path",
          "type": "str",
          "description": "Parameter: project_file_path"
        },
        {
          "name": "major_revision",
          "type": "int",
          "description": "Parameter: major_revision"
        },
        {
          "name": "processor_type_name",
          "type": "str",
          "description": "Parameter: processor_type_name"
        },
        {
          "name": "controller_name",
          "type": "str",
          "description": "Parameter: controller_name"
        },
        {
          "name": "operation_events=None",
          "type": "OperationEvent|list[OperationEvent]|None",
          "description": "Parameter: operation_events=None"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Project Management",
      "signature": "create_new_project(str project_file_path, int major_revision, str processor_type_name, str controller_name, OperationEvent|list[OperationEvent]|None operation_events=None)"
    },
    "delete_safety_signature": {
      "name": "delete_safety_signature",
      "class_name": "LogixProject",
      "description": "LogixProject method: delete_safety_signature(self)",
      "parameters": [],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Safety Operations",
      "signature": "delete_safety_signature(self)"
    },
    "download": {
      "name": "download",
      "class_name": "LogixProject",
      "description": "LogixProject method: download(self)",
      "parameters": [],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Controller Operations",
      "signature": "download(self)"
    },
    "generate_safety_signature": {
      "name": "generate_safety_signature",
      "class_name": "LogixProject",
      "description": "LogixProject method: generate_safety_signature(self)",
      "parameters": [],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Safety Operations",
      "signature": "generate_safety_signature(self)"
    },
    "get_communications_path": {
      "name": "get_communications_path",
      "class_name": "LogixProject",
      "description": "LogixProject method: get_communications_path(self)",
      "parameters": [],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Communication",
      "signature": "get_communications_path(self)"
    },
    "get_processor_types": {
      "name": "get_processor_types",
      "class_name": "LogixProject",
      "description": "LogixProject method: get_processor_types(int major_rev)",
      "parameters": [
        {
          "name": "major_rev",
          "type": "int",
          "description": "Parameter: major_rev"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "General",
      "signature": "get_processor_types(int major_rev)"
    },
    "get_safety_network_number": {
      "name": "get_safety_network_number",
      "class_name": "LogixProject",
      "description": "LogixProject method: get_safety_network_number(self, str module_name)",
      "parameters": [
        {
          "name": "module_name",
          "type": "str",
          "description": "Parameter: module_name"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Safety Operations",
      "signature": "get_safety_network_number(self, str module_name)"
    },
    "get_safety_signature": {
      "name": "get_safety_signature",
      "class_name": "LogixProject",
      "description": "LogixProject method: get_safety_signature(self)",
      "parameters": [],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Safety Operations",
      "signature": "get_safety_signature(self)"
    },
    "get_tag_value": {
      "name": "get_tag_value",
      "class_name": "LogixProject",
      "description": "LogixProject method: get_tag_value(self, str tag_path, OperationMode mode, DataType data_type)",
      "parameters": [
        {
          "name": "tag_path",
          "type": "str",
          "description": "Parameter: tag_path"
        },
        {
          "name": "mode",
          "type": "OperationMode",
          "description": "Parameter: mode"
        },
        {
          "name": "data_type",
          "type": "DataType",
          "description": "Parameter: data_type"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Tag Operations",
      "signature": "get_tag_value(self, str tag_path, OperationMode mode, DataType data_type)"
    },
    "get_tag_value_bool": {
      "name": "get_tag_value_bool",
      "class_name": "LogixProject",
      "description": "LogixProject method: get_tag_value_bool(self, str tag_path, OperationMode mode)",
      "parameters": [
        {
          "name": "tag_path",
          "type": "str",
          "description": "Parameter: tag_path"
        },
        {
          "name": "mode",
          "type": "OperationMode",
          "description": "Parameter: mode"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Tag Operations",
      "signature": "get_tag_value_bool(self, str tag_path, OperationMode mode)"
    },
    "get_tag_value_dint": {
      "name": "get_tag_value_dint",
      "class_name": "LogixProject",
      "description": "LogixProject method: get_tag_value_dint(self, str tag_path, OperationMode mode)",
      "parameters": [
        {
          "name": "tag_path",
          "type": "str",
          "description": "Parameter: tag_path"
        },
        {
          "name": "mode",
          "type": "OperationMode",
          "description": "Parameter: mode"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Tag Operations",
      "signature": "get_tag_value_dint(self, str tag_path, OperationMode mode)"
    },
    "get_tag_value_int": {
      "name": "get_tag_value_int",
      "class_name": "LogixProject",
      "description": "LogixProject method: get_tag_value_int(self, str tag_path, OperationMode mode)",
      "parameters": [
        {
          "name": "tag_path",
          "type": "str",
          "description": "Parameter: tag_path"
        },
        {
          "name": "mode",
          "type": "OperationMode",
          "description": "Parameter: mode"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Tag Operations",
      "signature": "get_tag_value_int(self, str tag_path, OperationMode mode)"
    },
    "get_tag_value_lint": {
      "name": "get_tag_value_lint",
      "class_name": "LogixProject",
      "description": "LogixProject method: get_tag_value_lint(self, str tag_path, OperationMode mode)",
      "parameters": [
        {
          "name": "tag_path",
          "type": "str",
          "description": "Parameter: tag_path"
        },
        {
          "name": "mode",
          "type": "OperationMode",
          "description": "Parameter: mode"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Tag Operations",
      "signature": "get_tag_value_lint(self, str tag_path, OperationMode mode)"
    },
    "get_tag_value_lreal": {
      "name": "get_tag_value_lreal",
      "class_name": "LogixProject",
      "description": "LogixProject method: get_tag_value_lreal(self, str tag_path, OperationMode mode)",
      "parameters": [
        {
          "name": "tag_path",
          "type": "str",
          "description": "Parameter: tag_path"
        },
        {
          "name": "mode",
          "type": "OperationMode",
          "description": "Parameter: mode"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Tag Operations",
      "signature": "get_tag_value_lreal(self, str tag_path, OperationMode mode)"
    },
    "get_tag_value_real": {
      "name": "get_tag_value_real",
      "class_name": "LogixProject",
      "description": "LogixProject method: get_tag_value_real(self, str tag_path, OperationMode mode)",
      "parameters": [
        {
          "name": "tag_path",
          "type": "str",
          "description": "Parameter: tag_path"
        },
        {
          "name": "mode",
          "type": "OperationMode",
          "description": "Parameter: mode"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Tag Operations",
      "signature": "get_tag_value_real(self, str tag_path, OperationMode mode)"
    },
    "get_tag_value_sint": {
      "name": "get_tag_value_sint",
      "class_name": "LogixProject",
      "description": "LogixProject method: get_tag_value_sint(self, str tag_path, OperationMode mode)",
      "parameters": [
        {
          "name": "tag_path",
          "type": "str",
          "description": "Parameter: tag_path"
        },
        {
          "name": "mode",
          "type": "OperationMode",
          "description": "Parameter: mode"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Tag Operations",
      "signature": "get_tag_value_sint(self, str tag_path, OperationMode mode)"
    },
    "get_tag_value_string": {
      "name": "get_tag_value_string",
      "class_name": "LogixProject",
      "description": "LogixProject method: get_tag_value_string(self, str tag_path, OperationMode mode)",
      "parameters": [
        {
          "name": "tag_path",
          "type": "str",
          "description": "Parameter: tag_path"
        },
        {
          "name": "mode",
          "type": "OperationMode",
          "description": "Parameter: mode"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Tag Operations",
      "signature": "get_tag_value_string(self, str tag_path, OperationMode mode)"
    },
    "get_tag_value_udint": {
      "name": "get_tag_value_udint",
      "class_name": "LogixProject",
      "description": "LogixProject method: get_tag_value_udint(self, str tag_path, OperationMode mode)",
      "parameters": [
        {
          "name": "tag_path",
          "type": "str",
          "description": "Parameter: tag_path"
        },
        {
          "name": "mode",
          "type": "OperationMode",
          "description": "Parameter: mode"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Tag Operations",
      "signature": "get_tag_value_udint(self, str tag_path, OperationMode mode)"
    },
    "get_tag_value_uint": {
      "name": "get_tag_value_uint",
      "class_name": "LogixProject",
      "description": "LogixProject method: get_tag_value_uint(self, str tag_path, OperationMode mode)",
      "parameters": [
        {
          "name": "tag_path",
          "type": "str",
          "description": "Parameter: tag_path"
        },
        {
          "name": "mode",
          "type": "OperationMode",
          "description": "Parameter: mode"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Tag Operations",
      "signature": "get_tag_value_uint(self, str tag_path, OperationMode mode)"
    },
    "get_tag_value_ulint": {
      "name": "get_tag_value_ulint",
      "class_name": "LogixProject",
      "description": "LogixProject method: get_tag_value_ulint(self, str tag_path, OperationMode mode)",
      "parameters": [
        {
          "name": "tag_path",
          "type": "str",
          "description": "Parameter: tag_path"
        },
        {
          "name": "mode",
          "type": "OperationMode",
          "description": "Parameter: mode"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Tag Operations",
      "signature": "get_tag_value_ulint(self, str tag_path, OperationMode mode)"
    },
    "get_tag_value_usint": {
      "name": "get_tag_value_usint",
      "class_name": "LogixProject",
      "description": "LogixProject method: get_tag_value_usint(self, str tag_path, OperationMode mode)",
      "parameters": [
        {
          "name": "tag_path",
          "type": "str",
          "description": "Parameter: tag_path"
        },
        {
          "name": "mode",
          "type": "OperationMode",
          "description": "Parameter: mode"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Tag Operations",
      "signature": "get_tag_value_usint(self, str tag_path, OperationMode mode)"
    },
    "go_offline": {
      "name": "go_offline",
      "class_name": "LogixProject",
      "description": "LogixProject method: go_offline(self)",
      "parameters": [],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Controller Operations",
      "signature": "go_offline(self)"
    },
    "go_online": {
      "name": "go_online",
      "class_name": "LogixProject",
      "description": "LogixProject method: go_online(self)",
      "parameters": [],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Controller Operations",
      "signature": "go_online(self)"
    },
    "is_safety_locked": {
      "name": "is_safety_locked",
      "class_name": "LogixProject",
      "description": "LogixProject method: is_safety_locked(self)",
      "parameters": [],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Safety Operations",
      "signature": "is_safety_locked(self)"
    },
    "load_image_from_sd_card": {
      "name": "load_image_from_sd_card",
      "class_name": "LogixProject",
      "description": "LogixProject method: load_image_from_sd_card(self)",
      "parameters": [],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "SD Card Operations",
      "signature": "load_image_from_sd_card(self)"
    },
    "open_logix_project": {
      "name": "open_logix_project",
      "class_name": "LogixProject",
      "description": "LogixProject method: open_logix_project(str project_file_path, OperationEvent|list[OperationEvent]|None operation_events=None)",
      "parameters": [
        {
          "name": "project_file_path",
          "type": "str",
          "description": "Parameter: project_file_path"
        },
        {
          "name": "operation_events=None",
          "type": "OperationEvent|list[OperationEvent]|None",
          "description": "Parameter: operation_events=None"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Project Management",
      "signature": "open_logix_project(str project_file_path, OperationEvent|list[OperationEvent]|None operation_events=None)"
    },
    "partial_export_to_xml_file": {
      "name": "partial_export_to_xml_file",
      "class_name": "LogixProject",
      "description": "LogixProject method: partial_export_to_xml_file(self, str x_path, str file_path)",
      "parameters": [
        {
          "name": "x_path",
          "type": "str",
          "description": "Parameter: x_path"
        },
        {
          "name": "file_path",
          "type": "str",
          "description": "Parameter: file_path"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Import/Export",
      "signature": "partial_export_to_xml_file(self, str x_path, str file_path)"
    },
    "partial_import_from_xml_file": {
      "name": "partial_import_from_xml_file",
      "class_name": "LogixProject",
      "description": "LogixProject method: partial_import_from_xml_file(self, str x_path, str xml_file_to_import, ImportCollisionOptions collision_option, bool continue_on_errors=False)",
      "parameters": [
        {
          "name": "x_path",
          "type": "str",
          "description": "Parameter: x_path"
        },
        {
          "name": "xml_file_to_import",
          "type": "str",
          "description": "Parameter: xml_file_to_import"
        },
        {
          "name": "collision_option",
          "type": "ImportCollisionOptions",
          "description": "Parameter: collision_option"
        },
        {
          "name": "continue_on_errors=False",
          "type": "bool",
          "description": "Parameter: continue_on_errors=False"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Import/Export",
      "signature": "partial_import_from_xml_file(self, str x_path, str xml_file_to_import, ImportCollisionOptions collision_option, bool continue_on_errors=False)"
    },
    "partial_import_rungs_from_xml_file": {
      "name": "partial_import_rungs_from_xml_file",
      "class_name": "LogixProject",
      "description": "LogixProject method: partial_import_rungs_from_xml_file(self, str x_path, int insert_position, int replace_count, str xml_file_to_import, PartialImportOption online_import_option)",
      "parameters": [
        {
          "name": "x_path",
          "type": "str",
          "description": "Parameter: x_path"
        },
        {
          "name": "insert_position",
          "type": "int",
          "description": "Parameter: insert_position"
        },
        {
          "name": "replace_count",
          "type": "int",
          "description": "Parameter: replace_count"
        },
        {
          "name": "xml_file_to_import",
          "type": "str",
          "description": "Parameter: xml_file_to_import"
        },
        {
          "name": "online_import_option",
          "type": "PartialImportOption",
          "description": "Parameter: online_import_option"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Import/Export",
      "signature": "partial_import_rungs_from_xml_file(self, str x_path, int insert_position, int replace_count, str xml_file_to_import, PartialImportOption online_import_option)"
    },
    "partial_import_with_target_from_xml_file": {
      "name": "partial_import_with_target_from_xml_file",
      "class_name": "LogixProject",
      "description": "LogixProject method: partial_import_with_target_from_xml_file(self, str x_path, str target_name, str xml_file_to_import, PartialImportOption online_import_option)",
      "parameters": [
        {
          "name": "x_path",
          "type": "str",
          "description": "Parameter: x_path"
        },
        {
          "name": "target_name",
          "type": "str",
          "description": "Parameter: target_name"
        },
        {
          "name": "xml_file_to_import",
          "type": "str",
          "description": "Parameter: xml_file_to_import"
        },
        {
          "name": "online_import_option",
          "type": "PartialImportOption",
          "description": "Parameter: online_import_option"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Import/Export",
      "signature": "partial_import_with_target_from_xml_file(self, str x_path, str target_name, str xml_file_to_import, PartialImportOption online_import_option)"
    },
    "read_connected_state": {
      "name": "read_connected_state",
      "class_name": "LogixProject",
      "description": "LogixProject method: read_connected_state(self)",
      "parameters": [],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Communication",
      "signature": "read_connected_state(self)"
    },
    "read_controller_mode": {
      "name": "read_controller_mode",
      "class_name": "LogixProject",
      "description": "LogixProject method: read_controller_mode(self)",
      "parameters": [],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Controller Operations",
      "signature": "read_controller_mode(self)"
    },
    "remove_event_handler": {
      "name": "remove_event_handler",
      "class_name": "LogixProject",
      "description": "LogixProject method: remove_event_handler(self, OperationEvent handler)",
      "parameters": [
        {
          "name": "handler",
          "type": "OperationEvent",
          "description": "Parameter: handler"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "General",
      "signature": "remove_event_handler(self, OperationEvent handler)"
    },
    "safety_lock": {
      "name": "safety_lock",
      "class_name": "LogixProject",
      "description": "LogixProject method: safety_lock(self, str password)",
      "parameters": [
        {
          "name": "password",
          "type": "str",
          "description": "Parameter: password"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Safety Operations",
      "signature": "safety_lock(self, str password)"
    },
    "safety_unlock": {
      "name": "safety_unlock",
      "class_name": "LogixProject",
      "description": "LogixProject method: safety_unlock(self, str password)",
      "parameters": [
        {
          "name": "password",
          "type": "str",
          "description": "Parameter: password"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Safety Operations",
      "signature": "safety_unlock(self, str password)"
    },
    "save": {
      "name": "save",
      "class_name": "LogixProject",
      "description": "LogixProject method: save(self)",
      "parameters": [],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Project Management",
      "signature": "save(self)"
    },
    "save_as": {
      "name": "save_as",
      "class_name": "LogixProject",
      "description": "LogixProject method: save_as(self, str save_path, bool force=False, bool detailed_l5x=False)",
      "parameters": [
        {
          "name": "save_path",
          "type": "str",
          "description": "Parameter: save_path"
        },
        {
          "name": "force=False",
          "type": "bool",
          "description": "Parameter: force=False"
        },
        {
          "name": "detailed_l5x=False",
          "type": "bool",
          "description": "Parameter: detailed_l5x=False"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Project Management",
      "signature": "save_as(self, str save_path, bool force=False, bool detailed_l5x=False)"
    },
    "set_communications_path": {
      "name": "set_communications_path",
      "class_name": "LogixProject",
      "description": "LogixProject method: set_communications_path(self, str project_path)",
      "parameters": [
        {
          "name": "project_path",
          "type": "str",
          "description": "Parameter: project_path"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Communication",
      "signature": "set_communications_path(self, str project_path)"
    },
    "set_safety_lock_password": {
      "name": "set_safety_lock_password",
      "class_name": "LogixProject",
      "description": "LogixProject method: set_safety_lock_password(self, str new_password, str old_password=\"\")",
      "parameters": [
        {
          "name": "new_password",
          "type": "str",
          "description": "Parameter: new_password"
        },
        {
          "name": "old_password=\"\"",
          "type": "str",
          "description": "Parameter: old_password=\"\""
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Safety Operations",
      "signature": "set_safety_lock_password(self, str new_password, str old_password=\"\")"
    },
    "set_safety_unlock_password": {
      "name": "set_safety_unlock_password",
      "class_name": "LogixProject",
      "description": "LogixProject method: set_safety_unlock_password(self, str new_password, str old_password=\"\")",
      "parameters": [
        {
          "name": "new_password",
          "type": "str",
          "description": "Parameter: new_password"
        },
        {
          "name": "old_password=\"\"",
          "type": "str",
          "description": "Parameter: old_password=\"\""
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Safety Operations",
      "signature": "set_safety_unlock_password(self, str new_password, str old_password=\"\")"
    },
    "set_tag_value": {
      "name": "set_tag_value",
      "class_name": "LogixProject",
      "description": "LogixProject method: set_tag_value(self, str tag_path, OperationMode mode, bytes tag_value, DataType data_type)",
      "parameters": [
        {
          "name": "tag_path",
          "type": "str",
          "description": "Parameter: tag_path"
        },
        {
          "name": "mode",
          "type": "OperationMode",
          "description": "Parameter: mode"
        },
        {
          "name": "tag_value",
          "type": "bytes",
          "description": "Parameter: tag_value"
        },
        {
          "name": "data_type",
          "type": "DataType",
          "description": "Parameter: data_type"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Tag Operations",
      "signature": "set_tag_value(self, str tag_path, OperationMode mode, bytes tag_value, DataType data_type)"
    },
    "set_tag_value_bool": {
      "name": "set_tag_value_bool",
      "class_name": "LogixProject",
      "description": "LogixProject method: set_tag_value_bool(self, str tag_path, OperationMode mode, bool tag_value)",
      "parameters": [
        {
          "name": "tag_path",
          "type": "str",
          "description": "Parameter: tag_path"
        },
        {
          "name": "mode",
          "type": "OperationMode",
          "description": "Parameter: mode"
        },
        {
          "name": "tag_value",
          "type": "bool",
          "description": "Parameter: tag_value"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Tag Operations",
      "signature": "set_tag_value_bool(self, str tag_path, OperationMode mode, bool tag_value)"
    },
    "set_tag_value_dint": {
      "name": "set_tag_value_dint",
      "class_name": "LogixProject",
      "description": "LogixProject method: set_tag_value_dint(self, str tag_path, OperationMode mode, int tag_value)",
      "parameters": [
        {
          "name": "tag_path",
          "type": "str",
          "description": "Parameter: tag_path"
        },
        {
          "name": "mode",
          "type": "OperationMode",
          "description": "Parameter: mode"
        },
        {
          "name": "tag_value",
          "type": "int",
          "description": "Parameter: tag_value"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Tag Operations",
      "signature": "set_tag_value_dint(self, str tag_path, OperationMode mode, int tag_value)"
    },
    "set_tag_value_int": {
      "name": "set_tag_value_int",
      "class_name": "LogixProject",
      "description": "LogixProject method: set_tag_value_int(self, str tag_path, OperationMode mode, int tag_value)",
      "parameters": [
        {
          "name": "tag_path",
          "type": "str",
          "description": "Parameter: tag_path"
        },
        {
          "name": "mode",
          "type": "OperationMode",
          "description": "Parameter: mode"
        },
        {
          "name": "tag_value",
          "type": "int",
          "description": "Parameter: tag_value"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Tag Operations",
      "signature": "set_tag_value_int(self, str tag_path, OperationMode mode, int tag_value)"
    },
    "set_tag_value_lint": {
      "name": "set_tag_value_lint",
      "class_name": "LogixProject",
      "description": "LogixProject method: set_tag_value_lint(self, str tag_path, OperationMode mode, int tag_value)",
      "parameters": [
        {
          "name": "tag_path",
          "type": "str",
          "description": "Parameter: tag_path"
        },
        {
          "name": "mode",
          "type": "OperationMode",
          "description": "Parameter: mode"
        },
        {
          "name": "tag_value",
          "type": "int",
          "description": "Parameter: tag_value"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Tag Operations",
      "signature": "set_tag_value_lint(self, str tag_path, OperationMode mode, int tag_value)"
    },
    "set_tag_value_lreal": {
      "name": "set_tag_value_lreal",
      "class_name": "LogixProject",
      "description": "LogixProject method: set_tag_value_lreal(self, str tag_path, OperationMode mode, float tag_value)",
      "parameters": [
        {
          "name": "tag_path",
          "type": "str",
          "description": "Parameter: tag_path"
        },
        {
          "name": "mode",
          "type": "OperationMode",
          "description": "Parameter: mode"
        },
        {
          "name": "tag_value",
          "type": "float",
          "description": "Parameter: tag_value"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Tag Operations",
      "signature": "set_tag_value_lreal(self, str tag_path, OperationMode mode, float tag_value)"
    },
    "set_tag_value_real": {
      "name": "set_tag_value_real",
      "class_name": "LogixProject",
      "description": "LogixProject method: set_tag_value_real(self, str tag_path, OperationMode mode, float tag_value)",
      "parameters": [
        {
          "name": "tag_path",
          "type": "str",
          "description": "Parameter: tag_path"
        },
        {
          "name": "mode",
          "type": "OperationMode",
          "description": "Parameter: mode"
        },
        {
          "name": "tag_value",
          "type": "float",
          "description": "Parameter: tag_value"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Tag Operations",
      "signature": "set_tag_value_real(self, str tag_path, OperationMode mode, float tag_value)"
    },
    "set_tag_value_sint": {
      "name": "set_tag_value_sint",
      "class_name": "LogixProject",
      "description": "LogixProject method: set_tag_value_sint(self, str tag_path, OperationMode mode, int tag_value)",
      "parameters": [
        {
          "name": "tag_path",
          "type": "str",
          "description": "Parameter: tag_path"
        },
        {
          "name": "mode",
          "type": "OperationMode",
          "description": "Parameter: mode"
        },
        {
          "name": "tag_value",
          "type": "int",
          "description": "Parameter: tag_value"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Tag Operations",
      "signature": "set_tag_value_sint(self, str tag_path, OperationMode mode, int tag_value)"
    },
    "set_tag_value_string": {
      "name": "set_tag_value_string",
      "class_name": "LogixProject",
      "description": "LogixProject method: set_tag_value_string(self, str tag_path, OperationMode mode, str tag_value)",
      "parameters": [
        {
          "name": "tag_path",
          "type": "str",
          "description": "Parameter: tag_path"
        },
        {
          "name": "mode",
          "type": "OperationMode",
          "description": "Parameter: mode"
        },
        {
          "name": "tag_value",
          "type": "str",
          "description": "Parameter: tag_value"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Tag Operations",
      "signature": "set_tag_value_string(self, str tag_path, OperationMode mode, str tag_value)"
    },
    "set_tag_value_udint": {
      "name": "set_tag_value_udint",
      "class_name": "LogixProject",
      "description": "LogixProject method: set_tag_value_udint(self, str tag_path, OperationMode mode, int tag_value)",
      "parameters": [
        {
          "name": "tag_path",
          "type": "str",
          "description": "Parameter: tag_path"
        },
        {
          "name": "mode",
          "type": "OperationMode",
          "description": "Parameter: mode"
        },
        {
          "name": "tag_value",
          "type": "int",
          "description": "Parameter: tag_value"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Tag Operations",
      "signature": "set_tag_value_udint(self, str tag_path, OperationMode mode, int tag_value)"
    },
    "set_tag_value_uint": {
      "name": "set_tag_value_uint",
      "class_name": "LogixProject",
      "description": "LogixProject method: set_tag_value_uint(self, str tag_path, OperationMode mode, int tag_value)",
      "parameters": [
        {
          "name": "tag_path",
          "type": "str",
          "description": "Parameter: tag_path"
        },
        {
          "name": "mode",
          "type": "OperationMode",
          "description": "Parameter: mode"
        },
        {
          "name": "tag_value",
          "type": "int",
          "description": "Parameter: tag_value"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Tag Operations",
      "signature": "set_tag_value_uint(self, str tag_path, OperationMode mode, int tag_value)"
    },
    "set_tag_value_ulint": {
      "name": "set_tag_value_ulint",
      "class_name": "LogixProject",
      "description": "LogixProject method: set_tag_value_ulint(self, str tag_path, OperationMode mode, int tag_value)",
      "parameters": [
        {
          "name": "tag_path",
          "type": "str",
          "description": "Parameter: tag_path"
        },
        {
          "name": "mode",
          "type": "OperationMode",
          "description": "Parameter: mode"
        },
        {
          "name": "tag_value",
          "type": "int",
          "description": "Parameter: tag_value"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Tag Operations",
      "signature": "set_tag_value_ulint(self, str tag_path, OperationMode mode, int tag_value)"
    },
    "set_tag_value_usint": {
      "name": "set_tag_value_usint",
      "class_name": "LogixProject",
      "description": "LogixProject method: set_tag_value_usint(self, str tag_path, OperationMode mode, int tag_value)",
      "parameters": [
        {
          "name": "tag_path",
          "type": "str",
          "description": "Parameter: tag_path"
        },
        {
          "name": "mode",
          "type": "OperationMode",
          "description": "Parameter: mode"
        },
        {
          "name": "tag_value",
          "type": "int",
          "description": "Parameter: tag_value"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Tag Operations",
      "signature": "set_tag_value_usint(self, str tag_path, OperationMode mode, int tag_value)"
    },
    "store_image_on_sd_card": {
      "name": "store_image_on_sd_card",
      "class_name": "LogixProject",
      "description": "LogixProject method: store_image_on_sd_card(self, RequestedLoadEvent load_event=RequestedLoadEvent.ON_POWER_UP, RequestedLoadMode load_mode=RequestedLoadMode.PROGRAM, AutomaticFirmwareUpdate afu_setting=AutomaticFirmwareUpdate.DISABLED, str image_name=\"\", str image_note=\"Image created via LD SDK.\")",
      "parameters": [
        {
          "name": "load_event=RequestedLoadEvent.ON_POWER_UP",
          "type": "RequestedLoadEvent",
          "description": "Parameter: load_event=RequestedLoadEvent.ON_POWER_UP"
        },
        {
          "name": "load_mode=RequestedLoadMode.PROGRAM",
          "type": "RequestedLoadMode",
          "description": "Parameter: load_mode=RequestedLoadMode.PROGRAM"
        },
        {
          "name": "afu_setting=AutomaticFirmwareUpdate.DISABLED",
          "type": "AutomaticFirmwareUpdate",
          "description": "Parameter: afu_setting=AutomaticFirmwareUpdate.DISABLED"
        },
        {
          "name": "image_name=\"\"",
          "type": "str",
          "description": "Parameter: image_name=\"\""
        },
        {
          "name": "SDK.\"",
          "type": "str image_note=\"Image created via LD",
          "description": "Parameter: SDK.\""
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "SD Card Operations",
      "signature": "store_image_on_sd_card(self, RequestedLoadEvent load_event=RequestedLoadEvent.ON_POWER_UP, RequestedLoadMode load_mode=RequestedLoadMode.PROGRAM, AutomaticFirmwareUpdate afu_setting=AutomaticFirmwareUpdate.DISABLED, str image_name=\"\", str image_note=\"Image created via LD SDK.\")"
    },
    "upload": {
      "name": "upload",
      "class_name": "LogixProject",
      "description": "LogixProject method: upload(self)",
      "parameters": [],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Controller Operations",
      "signature": "upload(self)"
    },
    "upload_to_new_project": {
      "name": "upload_to_new_project",
      "class_name": "LogixProject",
      "description": "LogixProject method: upload_to_new_project(str project_file_path, str comm_path, OperationEvent|list[OperationEvent]|None operation_events=None)",
      "parameters": [
        {
          "name": "project_file_path",
          "type": "str",
          "description": "Parameter: project_file_path"
        },
        {
          "name": "comm_path",
          "type": "str",
          "description": "Parameter: comm_path"
        },
        {
          "name": "operation_events=None",
          "type": "OperationEvent|list[OperationEvent]|None",
          "description": "Parameter: operation_events=None"
        }
      ],
      "return_type": "Any",
      "is_async": true,
      "examples": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject-members.html",
      "namespace": "logix_designer_sdk.logix_project",
      "category": "Controller Operations",
      "signature": "upload_to_new_project(str project_file_path, str comm_path, OperationEvent|list[OperationEvent]|None operation_events=None)"
    }
  },
  "classes": {
    "LogixProject": {
      "name": "LogixProject",
      "description": "Logix Designer SDK: logix_designer_sdk.logix_project.LogixProject Class Reference",
      "namespace": "logix_designer_sdk.logix_project",
      "methods": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1logix__project_1_1LogixProject.html",
      "inheritance": [],
      "category": "Project Management"
    },
    "Logix": {
      "name": "Logix",
      "description": "An exception type indicating that an error occurred while performing an operation on a project.",
      "namespace": "logix_designer_sdk.exceptions",
      "methods": [],
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1exceptions_1_1ProjectError.html",
      "inheritance": [],
      "category": "SDK Classes"
    }
  },
  "enums": {
    "ConnectedState": {
      "name": "ConnectedState",
      "description": "Possible controller Connected State that could be read from controller by read_connected_state().",
      "values": [],
      "namespace": "logix_designer_sdk.enums",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1enums_1_1ConnectedState.html",
      "category": "Enumerations"
    },
    "ControllerMode": {
      "name": "ControllerMode",
      "description": "Possible controller modes that could be read from controller by read_controller_mode().",
      "values": [],
      "namespace": "logix_designer_sdk.enums",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1enums_1_1ControllerMode.html",
      "category": "Enumerations"
    },
    "DataType": {
      "name": "DataType",
      "description": "Possible data types for a tag.",
      "values": [],
      "namespace": "logix_designer_sdk.enums",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1enums_1_1DataType.html",
      "category": "Enumerations"
    },
    "ImportCollisionOptions": {
      "name": "ImportCollisionOptions",
      "description": "Possible options to handle collision.",
      "values": [],
      "namespace": "logix_designer_sdk.enums",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1enums_1_1ImportCollisionOptions.html",
      "category": "Enumerations"
    },
    "OperationMode": {
      "name": "OperationMode",
      "description": "Possible mode: online or offline operation.",
      "values": [],
      "namespace": "logix_designer_sdk.enums",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1enums_1_1OperationMode.html",
      "category": "Enumerations"
    },
    "RequestedControllerMode": {
      "name": "RequestedControllerMode",
      "description": "Possible controller modes that could be requested from controller.",
      "values": [],
      "namespace": "logix_designer_sdk.enums",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1enums_1_1RequestedControllerMode.html",
      "category": "Enumerations"
    },
    "RequestedLoadEvent": {
      "name": "RequestedLoadEvent",
      "description": "Possible load from flash memory events.",
      "values": [],
      "namespace": "logix_designer_sdk.enums",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1enums_1_1RequestedLoadEvent.html",
      "category": "Enumerations"
    },
    "RequestedLoadMode": {
      "name": "RequestedLoadMode",
      "description": "Controller mode upon restoring from flash.",
      "values": [],
      "namespace": "logix_designer_sdk.enums",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\classlogix__designer__sdk_1_1enums_1_1RequestedLoadMode.html",
      "category": "Enumerations"
    }
  },
  "examples": {
    "py_build_project": {
      "title": "Python Example: Build Project",
      "description": "This is an example Logix Designer SDK customer application.\nIt allows the user to build a Logix Designer project file for a specified controller type (physical/echo).\nThe user will provide three arguments:\n    1) Full path for the Logix Designer project file\n    2) Number that represents requested build target: 0 for Default, 1 for Physical, 2 for Echo.\n\nExample:\npython build_project.py \"C:\\\\ProjectDir\\\\MyProject.ACD\" 2",
      "code": "import asyncio\nimport sys\nfrom logix_designer_sdk import LogixProject, RequestedBuildTarget, StdOutEventLogger\nasync def main():\n    if len(sys.argv) != 3:\n        print(\n            f\"Usage: python {sys.argv[0]} projectFilePath buildTarget (0 for Default, 1 for Physical, 2 for Echo)\"\n        )\n        sys.exit(1)\n    project_path = sys.argv[1]\n    build_target = int(sys.argv[2])\n    build_targets = [\n        RequestedBuildTarget.DEFAULT_TARGET,\n        RequestedBuildTarget.PHYSICAL_CONTROLLER,\n        RequestedBuildTarget.ECHO_CONTROLLER,\n    ]\n    selected_target = build_targets[build_target]\n    project = await LogixProject.open_logix_project(project_path, StdOutEventLogger())\n    await project.build(selected_target)\n    await project.save()\n    project.close()\n    print(f\"Build for target type {build_target} DONE.\")\n    sys.exit(0)\nif __name__ == \"__main__\":\n    asyncio.run(main())",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Examples\\build_project.py",
      "category": "Python Examples",
      "related_methods": [
        "save",
        "build",
        "open_logix_project"
      ]
    },
    "py_change_controller_mode": {
      "title": "Python Example: Change Controller Mode",
      "description": "This is an example Logix Designer SDK customer application.\nIt allows the user to change given controller mode.\nThe user will provide two or three arguments:\n    1) Full path for the Logix Designer project file.\n    2) Communications path for the controller that mode change is requested.\n    3) Number that represents requested mode: 0 for Program, 1 for Run, 2 for Test.\nExample:\npython change_controller_mode.py \"C:\\\\ProjectDir\\\\MyProject.ACD\" AB_ETH-1\\\\10.88.45.25\\\\Backplane\\\\0 1",
      "code": "import asyncio\nimport sys\nfrom logix_designer_sdk import LogixProject, RequestedControllerMode, StdOutEventLogger\nasync def main():\n    if len(sys.argv) != 4:\n        print(f\"Usage: python {sys.argv[0]} projectFilePath commPath mode\")\n        sys.exit(1)\n    project_path = sys.argv[1]\n    comm_path = sys.argv[2]\n    mode = int(sys.argv[3])\n    controller_modes = [\n        RequestedControllerMode.PROGRAM,\n        RequestedControllerMode.RUN,\n        RequestedControllerMode.TEST,\n    ]\n    controller_mode_names = [\n        \"Program\",\n        \"Run\",\n        \"Test\",\n    ]\n    selected_mode = controller_modes[mode]\n    selected_mode_name = controller_mode_names[mode]\n    project = await LogixProject.open_logix_project(project_path, StdOutEventLogger())\n    await project.set_communications_path(comm_path)\n    await project.change_controller_mode(selected_mode)\n    project.close()\n    print(f\"Controller mode changed to: {selected_mode_name}({mode}).\")\n    sys.exit(0)\nif __name__ == \"__main__\":\n    asyncio.run(main())",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Examples\\change_controller_mode.py",
      "category": "Python Examples",
      "related_methods": [
        "set_communications_path",
        "change_controller_mode",
        "open_logix_project"
      ]
    },
    "py_change_controller_type": {
      "title": "Python Example: Change Controller Type",
      "description": "This is an example Logix Designer SDK customer application.\nIt changes the controller type in a Logix Designer project\nand takes three arguments\n    1) A full path to a project file to update\n    2) The name of the controller type to update the project to\n    3) The location to save the converted file to\nExample:\npython change_controller_type.py \"C:\\\\ProjectDir\\\\MyProject.ACD\" \"1756-L85E\" \"C:\\\\ProjectDir\\\\MyProject_converted.ACD\"",
      "code": "import asyncio\nimport sys\nfrom logix_designer_sdk import LogixProject, StdOutEventLogger\nasync def main():\n    if len(sys.argv) != 4:\n        print(f\"Usage: python {sys.argv[0]} projectFilePath controllerType savePath\")\n        sys.exit(1)\n    project_path = sys.argv[1]\n    controller_type = sys.argv[2]\n    save_path = sys.argv[3]\n    project = await LogixProject.open_logix_project(project_path, StdOutEventLogger())\n    await project.change_controller_type(controller_type)\n    await project.save_as(save_path, True)\n    print(f\"Controller type was changed to {controller_type} DONE.\")\n    sys.exit(0)\nif __name__ == \"__main__\":\n    asyncio.run(main())",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Examples\\change_controller_type.py",
      "category": "Python Examples",
      "related_methods": [
        "save_as",
        "open_logix_project",
        "change_controller_type"
      ]
    },
    "py_convert_project": {
      "title": "Python Example: Convert Project",
      "description": "This is an example Logix Designer SDK customer application.\nIt allows the user to Convert any valid LD file and save it to a new location\nThe user will provide three arguments:\n    1) Full path for the Logix Designer project that is to be opened.\n    2) Major revision of LD to convert project to.\n    3) Full path for where the Logix Designer project should be saved.\n\nExample:\npython convert_project.py \"C:\\\\ProjectDir\\\\OldExistingMyProject.L5K\" 37 \"C:\\\\ProjectDir\\\\UpdatedMyProject.L5X\"",
      "code": "import asyncio\nimport sys\nfrom logix_designer_sdk import LogixProject, StdOutEventLogger\nasync def main():\n    if len(sys.argv) != 4:\n        print(\n        )\n        sys.exit(1)\n    project_file_path = sys.argv[1]\n    major_revision = int(sys.argv[2])\n    save_project_path = sys.argv[3]\n    project = await LogixProject.convert(\n        project_file_path, major_revision, StdOutEventLogger()\n    )\n    await project.save_as(save_project_path, True)\n    print(f\"Project has been saved to: {save_project_path}.\")\nif __name__ == \"__main__\":\n    asyncio.run(main())",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Examples\\convert_project.py",
      "category": "Python Examples",
      "related_methods": [
        "convert",
        "save_as"
      ]
    },
    "py_create_deployment_sd_card": {
      "title": "Python Example: Create Deployment Sd Card",
      "description": "This example shows how to make a script using FactoryTalk Logix Designer SDK.\n\nThis example script allows users to download a single ACD file to a controller and then save\nthe project file from the controller to an SD card any number of times. This example pauses after each save to allow\nthe SD card to be swapped out.\n\nUse this program to quickly provision a number of controllers using\nSD cards, for example, when commissioning several identical production lines.\n\nUse this program by running the script like this:\n\nSDCardFactory C:\\\\myProjects\\\\myProject.acd AB_ETH\\\\10.0.0.1 6\n\n\nExample:\npython create_deployment_sd_card.py C:\\\\myProjects\\\\myProject.acd AB_ETH\\\\10.0.0.1 6",
      "code": "import asyncio\nimport sys\nfrom logix_designer_sdk.exceptions import LogixSdkError\nfrom logix_designer_sdk import LogixProject, RequestedControllerMode, StdOutEventLogger\nclass SDCardFactory:\n    def __init__(self, project: LogixProject) -> None:\n        self.project = project\n    @staticmethod\n    async def init(file_path: str, comm_path: str):\n        project = await LogixProject.open_logix_project(file_path, StdOutEventLogger())\n        await project.set_communications_path(comm_path)\n        await project.change_controller_mode(RequestedControllerMode.PROGRAM)\n        await project.download()\n        return SDCardFactory(project)\n    async def load_to_sd_card(self) -> None:\n        await self.project.store_image_on_sd_card()\nasync def handle_load_to_sd_card_and_prompt(i: int, how_many: int) -> bool:\n    cancelledByUser = False\n    print(\"\\nWriting to SD card...\")\n    try:\n        await sd_card_factory.load_to_sd_card()\n        print(\"Successfully wrote to SD card.\")\n        if i < how_many - 1:\n            print(\"You may swap the SD Card when it is safe to do so.\")\n            key_info = None\n            while key_info != \"y\" and key_info != \"n\":\n                key_info = input(\"Save project to the next SD card? [y/n]: \").lower()\n            if key_info == \"n\":\n                cancelledByUser = True\n        else:\n            print(\"All done!\")\n    except LogixSdkError as ex:\n        try_again = prompt_try_again(ex)\n        if try_again:\n            return await handle_load_to_sd_card_and_prompt(i, how_many)\n        else:\n            cancelledByUser = True\n    return cancelledByUser\ndef prompt_try_again(ex: LogixSdkError) -> bool:\n    response: str = None\n    while response != \"y\" and response != \"n\":\n        print(\"FAILED!!!\")\n        print(\"Unable to write to SD card. Error message was:\")\n        print(ex.Message)\n        print(\"Try again? [y/n]: \")\n        response = input().lower()\n    return response == \"y\"\nsd_card_factory: SDCardFactory = None\nasync def main():\n    if len(sys.argv) != 4:\n        print(\n        )\n        sys.exit(1)\n    acd_path = sys.argv[1]\n    comm_path = sys.argv[2]\n    how_many = int(sys.argv[3])\n    global sd_card_factory\n    sd_card_factory = await SDCardFactory.init(acd_path, comm_path)\n    for i in range(how_many):\n        cancelledByUser = await handle_load_to_sd_card_and_prompt(i, how_many)\n        if cancelledByUser:\n            print(\"Operation canceled by user\")\n            break\nif __name__ == \"__main__\":\n    asyncio.run(main())",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Examples\\create_deployment_sd_card.py",
      "category": "Python Examples",
      "related_methods": [
        "set_communications_path",
        "change_controller_mode",
        "open_logix_project",
        "download"
      ]
    },
    "py_create_new_project": {
      "title": "Python Example: Create New Project",
      "description": "This is an example Logix Designer SDK customer application.\nIt allows the user to create new project\nThe user will provide four arguments:\n    1) Full path for the Logix Designer project that will be created.\n    2) Major revision of LD to convert project to.\n    3) Processor type name\n    4) Controller name\n\nExample:\npython create_new_project.py \"C:\\\\ProjectDir\\\\MyProject.ACD\" 37 \"1756-L85E\" \"myController\"",
      "code": "import asyncio\nimport sys\nfrom logix_designer_sdk import LogixProject, StdOutEventLogger\nasync def main():\n    if len(sys.argv) != 5:\n        print(\n        )\n        sys.exit(1)\n    project_file_path = sys.argv[1]\n    major_revision = int(sys.argv[2])\n    processor_type_name = sys.argv[3]\n    controller_name = sys.argv[4]\n    _ = await LogixProject.create_new_project(\n        project_file_path,\n        major_revision,\n        processor_type_name,\n        controller_name,\n        StdOutEventLogger(),\n    )\n    print(f\"Project has been saved to: {project_file_path}.\")\nif __name__ == \"__main__\":\n    asyncio.run(main())",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Examples\\create_new_project.py",
      "category": "Python Examples",
      "related_methods": [
        "create_new_project"
      ]
    },
    "py_download_project": {
      "title": "Python Example: Download Project",
      "description": "This is an example Logix Designer SDK customer application.\nIt allows the user to download a Logix Designer project file into a controller.\nThe user will provide two arguments:\n    1) Full path for the Logix Designer project file\n    2) Communications path for the controller targeted for the Download\n\nExample:\npython download_project.py \"C:\\\\ProjectDir\\\\MyProject.ACD\" AB_ETH-1\\\\10.88.45.25\\\\Backplane\\\\0",
      "code": "import asyncio\nimport sys\nfrom logix_designer_sdk import ControllerMode, LogixProject, StdOutEventLogger\nasync def main():\n    if len(sys.argv) != 3:\n        print(f\"Usage: python {sys.argv[0]} projectFilePath commPath\")\n        sys.exit(1)\n    project_path = sys.argv[1]\n    comm_path = sys.argv[2]\n    project = await LogixProject.open_logix_project(project_path, StdOutEventLogger())\n    await project.set_communications_path(comm_path)\n    controller_mode = await project.read_controller_mode()\n    if controller_mode != ControllerMode.PROGRAM:\n        print(\n            f\"Controller mode is {controller_mode}. Downloading is possible only if the controller is in 'Program' mode\"\n        )\n        return\n    await project.download()\n    await project.save()\n    print(\"Download DONE.\")\nif __name__ == \"__main__\":\n    asyncio.run(main())",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Examples\\download_project.py",
      "category": "Python Examples",
      "related_methods": [
        "open_logix_project",
        "save",
        "download",
        "set_communications_path",
        "read_controller_mode"
      ]
    },
    "py_generate_delete_get_safety_signature": {
      "title": "Python Example: Generate Delete Get Safety Signature",
      "description": "This is an example Logix Designer SDK customer application.\nIt can generate, delete or get safety signature.\nThe user can choose desired action.\nThe user will provide three arguments:\n    - a full path to a project file\n    - communication path\n    - requested operation: 0 for Generate, 1 for Delete and 2 for Get Safety Signature\n\nExample:\npython generate_delete_get_safety_signature.py \"C:\\\\Users\\\\BRubble\\\\Documents\\\\Studio 5000\\\\Projects\\\\MyProj.ACD\" AB_ETH-1\\\\10.88.45.25\\\\Backplane\\\\0 0",
      "code": "import asyncio\nimport sys\nfrom collections.abc import Callable\nfrom enum import Enum\nfrom logix_designer_sdk import LogixProject, StdOutEventLogger\nasync def invoke_safety_signature_procedure(\n    project: LogixProject, comm_path: str, procedure: Callable, procedureName: str\n):\n    await project.set_communications_path(comm_path)\n    await project.download()\n    await project.go_online()\n    await procedure()\n    await project.save()\n    print(f\"{procedureName} Safety Signature succeed.\")\nasync def get_safety_signature(project: LogixProject):\n    signature = await project.get_safety_signature()\n    print(f\"Signature get from project: {signature}\")\n    print(f\"Get Safety Signature succeed.\")\nclass SignatureOperation(Enum):\n    GENERATE_SIGNATURE = 0\n    DELETE_SIGNATURE = 1\n    GET_SIGNATURE = 2\nasync def main():\n    if len(sys.argv) != 4:\n        print(\n            f\"Usage: python {sys.argv[0]} projectFilePath commPath operation(0 for Generate, 1 for Delete and 2 for Get Safety Signature)\"\n        )\n        sys.exit(1)\n    project_path = sys.argv[1]\n    commPath = sys.argv[2]\n    requested_operation = int(sys.argv[3])\n    possible_operations = [item.value for item in SignatureOperation]\n    if requested_operation not in possible_operations:\n        print(\"Invalid requestedOperation value. It should be in range 0 to 2\")\n        sys.exit(1)\n    project = await LogixProject.open_logix_project(project_path, StdOutEventLogger())\n    match requested_operation:\n        case SignatureOperation.GENERATE_SIGNATURE.value:\n            procedure = lambda: project.generate_safety_signature()\n            return await invoke_safety_signature_procedure(\n                project, commPath, procedure, \"Generate\"\n            )\n        case SignatureOperation.DELETE_SIGNATURE.value:\n            procedure = lambda: project.delete_safety_signature()\n            return await invoke_safety_signature_procedure(\n                project, commPath, procedure, \"Delete\"\n            )\n        case SignatureOperation.GET_SIGNATURE.value:\n            return await get_safety_signature(project)\nif __name__ == \"__main__\":\n    asyncio.run(main())",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Examples\\generate_delete_get_safety_signature.py",
      "category": "Python Examples",
      "related_methods": [
        "get_safety_signature",
        "open_logix_project",
        "go_online",
        "save",
        "download",
        "set_communications_path"
      ]
    },
    "py_get_comm_path": {
      "title": "Python Example: Get Comm Path",
      "description": "This is an example Logix Designer SDK customer application. It prints\nthe project communications path in a Logix Designer project and takes\none argument:\n    - a full path to a project file\n\nExample:\npython get_comm_path.py \"C:\\\\Users\\\\BRubble\\\\Documents\\\\Studio 5000\\\\Projects\\\\MyProj.ACD\"",
      "code": "import asyncio\nimport sys\nfrom logix_designer_sdk import LogixProject, StdOutEventLogger\nasync def main():\n    if len(sys.argv) != 2:\n        print(f\"Usage: python {sys.argv[0]} projectFilePath\")\n        sys.exit(1)\n    project_path = sys.argv[1]\n    project = await LogixProject.open_logix_project(project_path, StdOutEventLogger())\n    get_comm_path_result = await project.get_communications_path()\n    project.close()\n    print(f\"Project's communication path is {get_comm_path_result}\")\nif __name__ == \"__main__\":\n    asyncio.run(main())",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Examples\\get_comm_path.py",
      "category": "Python Examples",
      "related_methods": [
        "open_logix_project",
        "get_communications_path"
      ]
    },
    "py_get_processor_type": {
      "title": "Python Example: Get Processor Type",
      "description": "This is an example Logix Designer SDK customer application.\nIt returns the processor types available for specific major revision\nIt takes one argument.\n    - Logix Designer major revision.\nExample:\npython get_processor_type.py 31",
      "code": "import asyncio\nimport sys\nfrom logix_designer_sdk import LogixProject\nfrom logix_designer_sdk.exceptions import LogixSdkError\nasync def main():\n    if len(sys.argv) != 2:\n        print(f\"Usage: python {sys.argv[0]} majorRevision\")\n        sys.exit(1)\n    major_revision = int(sys.argv[1])\n    try:\n        proc_types_dict = await LogixProject.get_processor_types(major_revision)\n    except LogixSdkError as e:\n        print(f\"Unable to get processor types dictionary for V{major_revision}\")\n        print(e.message)\n        sys.exit(1)\n    print(f\"Supported processor types for V{major_revision} are:\")\n    for key, value in proc_types_dict.items():\n        print(\n            f\"Processor Type Name: {key} Processor ID: {value.id} Product Code: {value.product_code} Product Type: {value.product_type}\"\n        )\n    print(\"Get processor type done.\")\nif __name__ == \"__main__\":\n    asyncio.run(main())",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Examples\\get_processor_type.py",
      "category": "Python Examples",
      "related_methods": [
        "get_processor_types"
      ]
    },
    "py_get_safety_network_number": {
      "title": "Python Example: Get Safety Network Number",
      "description": "This is an example Logix Designer SDK customer application.\nIt prints safety network number of requested module.\nThe user will provide two arguments:\n    - a full path to a project file\n    - module name\nExample:\npython get_safety_network_number \"C:\\\\Users\\\\Public\\\\Documents\\\\Studio 5000\\\\Projects\\\\MyProj.ACD\" \"local\"",
      "code": "import asyncio\nimport sys\nfrom logix_designer_sdk import LogixProject, StdOutEventLogger\nasync def main():\n    if len(sys.argv) != 3:\n        print(f\"Usage: python {sys.argv[0]} projectFilePath moduleName\")\n        sys.exit(1)\n    file_path = sys.argv[1]\n    module_name = sys.argv[2]\n    project = await LogixProject.open_logix_project(file_path, StdOutEventLogger())\n    snn = await project.get_safety_network_number(module_name)\n    print(f\"Safety network number of module {module_name} is: {snn}\")\n    print(\"Get Safety Network Number succeed.\")\nif __name__ == \"__main__\":\n    asyncio.run(main())",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Examples\\get_safety_network_number.py",
      "category": "Python Examples",
      "related_methods": [
        "open_logix_project",
        "get_safety_network_number"
      ]
    },
    "py_get_tag_value": {
      "title": "Python Example: Get Tag Value",
      "description": "This is an example Logix Designer SDK customer application.\nIt reads a controller tag of DINT type from a Logix Designer project\nand takes two arguments:\n    - a full path to a project file\n    - a tag name\nExample:\npython get_tag_value.py \"C:\\\\Users\\\\BRubble\\\\Documents\\\\Studio 5000\\\\Projects\\\\MyProj.ACD\" my_tag",
      "code": "import asyncio\nimport sys\nfrom logix_designer_sdk import LogixProject, OperationMode, StdOutEventLogger\nasync def main():\n    if len(sys.argv) != 3:\n        print(f\"Usage: python {sys.argv[0]} projectFilePath tagName\")\n        sys.exit(1)\n    project_path = sys.argv[1]\n    tag_name = sys.argv[2]\n    project = await LogixProject.open_logix_project(project_path, StdOutEventLogger())\n    tag_path = f\"Controller/Tags/Tag[@Name='{tag_name}']\"\n    tag_value = await project.get_tag_value_dint(\n        tag_path=tag_path, mode=OperationMode.OFFLINE\n    )\n    print(f\"Tag value: {tag_value}\")\nif __name__ == \"__main__\":\n    asyncio.run(main())",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Examples\\get_tag_value.py",
      "category": "Python Examples",
      "related_methods": [
        "get_tag_value_dint",
        "open_logix_project"
      ]
    },
    "py_go_online_offline": {
      "title": "Python Example: Go Online Offline",
      "description": "This is an example Logix Designer SDK customer application.\nIt allows the user to change controller's connected state.\nThe user will provide two arguments:\n    1) Full path for the Logix Designer project file.\n    2) Communications path for the controller that mode change is requested.\nExample:\npython go_online_offline.py \"C:\\\\ProjectDir\\\\MyProject.ACD\" AB_ETH-1\\\\10.88.45.25\\\\Backplane\\\\0",
      "code": "import asyncio\nimport sys\nfrom logix_designer_sdk import ConnectedState, LogixProject, StdOutEventLogger\nasync def main():\n    if len(sys.argv) != 3:\n        print(f\"Usage: python {sys.argv[0]} projectFilePath commPath\")\n        sys.exit(1)\n    project_path = sys.argv[1]\n    comm_path = sys.argv[2]\n    project = await LogixProject.open_logix_project(project_path, StdOutEventLogger())\n    await project.set_communications_path(comm_path)\n    await project.download()\n    await project.go_online()\n    connected_state = await project.read_connected_state()\n    assert (\n        connected_state is ConnectedState.ONLINE\n    ), \"The connected state is different than expected\"\n    await project.go_offline()\n    connected_state = await project.read_connected_state()\n    assert (\n        connected_state is ConnectedState.OFFLINE\n    ), \"The connected state is different than expected\"\n    project.close()\n    print(\"Change and read controller connected status succeed\")\n    sys.exit(0)\nif __name__ == \"__main__\":\n    asyncio.run(main())",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Examples\\go_online_offline.py",
      "category": "Python Examples",
      "related_methods": [
        "open_logix_project",
        "go_online",
        "read_connected_state",
        "download",
        "set_communications_path",
        "go_offline"
      ]
    },
    "py_load_image_from_sd_card": {
      "title": "Python Example: Load Image From Sd Card",
      "description": "This is an example Logix Designer SDK customer application.\nIt allows the user to load stored image from SD card, save logs in file and logging to console.\nLoad from SD card functionality is supported since version 34.\nThe user will provide two or three arguments:\n    1) Full path for the Logix Designer project file.\n    2) Communications path for the controller that mode change is requested.\nExample:\npython load_image_from_sd_card.py \"C:\\\\ProjectDir\\\\MyProject.ACD\" AB_ETH-1\\\\10.88.45.25\\\\Backplane\\\\0",
      "code": "import asyncio\nimport sys\nfrom logix_designer_sdk import LogixProject, RequestedControllerMode, StdOutEventLogger\nasync def main():\n    if len(sys.argv) != 3:\n        print(f\"Usage: python {sys.argv[0]} projectFilePath commPath\")\n        sys.exit(1)\n    file_path = sys.argv[1]\n    comm_path = sys.argv[2]\n    project = await LogixProject.open_logix_project(file_path, StdOutEventLogger())\n    await project.set_communications_path(comm_path)\n    await project.download()\n    await project.change_controller_mode(RequestedControllerMode.PROGRAM)\n    await project.load_image_from_sd_card()\n    print(\"Project was successfully loaded from SD card.\")\nif __name__ == \"__main__\":\n    asyncio.run(main())",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Examples\\load_image_from_sd_card.py",
      "category": "Python Examples",
      "related_methods": [
        "open_logix_project",
        "change_controller_mode",
        "load_image_from_sd_card",
        "download",
        "set_communications_path"
      ]
    },
    "py_many_acd_many_controller_download": {
      "title": "Python Example: Many Acd Many Controller Download",
      "description": "This class shows how to create a static class which could be referenced by a program.\n\nThis class associates multiple controller comm paths with their specified ACD file,\nthen exposes a method which will open the projects and initiate downloads in parallel.\n\nIf you instead wanted to download in series, see the SingleAcdManyControllerDownload example.\n\nIf you want to see how to reference a class in your main program,\nsee the examples CreateDeploymentSdCard or ProvisionAndValidate.",
      "code": "import asyncio\nfrom typing import Dict\nfrom logix_designer_sdk import StdOutEventLogger\nfrom logix_designer_sdk.logix_project import LogixProject, RequestedControllerMode\nclass DownloadManyAcds:\n    ctrl1 = r\"AB_ETH-1\\ip_address\\Backplane\\91\"\n    ctrl2 = r\"AB_ETH-1\\ip_address\\Backplane\\92\"\n    ctrl3 = r\"AB_ETH-1\\ip_address\\Backplane\\93\"\n    ctrl4 = r\"AB_ETH-1\\ip_address\\Backplane\\94\"\n    ctrl5 = r\"AB_ETH-1\\ip_address\\Backplane\\95\"\n    file1 = r\"C:\\Path\\To\\Project.acd\"\n    file2 = r\"C:\\Path\\To\\Project2.acd\"\n    file3 = r\"C:\\Path\\To\\Project3.acd\"\n    file4 = r\"C:\\Path\\To\\Project4.acd\"\n    file5 = r\"C:\\Path\\To\\Project5.acd\"\n    controllers = {\n        ctrl1: file1,\n        ctrl2: file2,\n        ctrl3: file3,\n        ctrl4: file4,\n        ctrl5: file5,\n    }\n    logix_sdk_projects: Dict[str, LogixProject] = {}\n    @staticmethod\n    async def prepare_controller(comm_path, file_path):\n        logixProject = await LogixProject.open_logix_project(file_path, StdOutEventLogger())\n        await logixProject.set_communications_path(comm_path)\n        await logixProject.change_controller_mode(RequestedControllerMode.PROGRAM)\n        await logixProject.download()\n        await logixProject.change_controller_mode(RequestedControllerMode.RUN)\n        print(f\"Finished downloading {file_path} to ${comm_path}\")\n    @staticmethod\n    async def download() -> None:\n        tasks = []\n        for comm_path, file_path in DownloadManyAcds.controllers.items():\n            tasks.append(DownloadManyAcds.prepare_controller(comm_path, file_path))\n        await asyncio.gather(*tasks)\nasyncio.run(DownloadManyAcds.download())",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Examples\\many_acd_many_controller_download.py",
      "category": "Python Examples",
      "related_methods": [
        "set_communications_path",
        "change_controller_mode",
        "open_logix_project",
        "download"
      ]
    },
    "py_open_and_save_file": {
      "title": "Python Example: Open And Save File",
      "description": "This is an example Logix Designer SDK customer application.\nIt allows the user to Open any valid LD file and save it to a new location\nThe user will provide two arguments:\n    1) Full path for the Logix Designer project that is to be opened.\n    2) Full path for where the Logix Designer project should be saved.\n    3) Bool for detailed_l5x to provide additional info when saving as an L5X file\n\nExample:\npython open_and_save_file.py \"C:\\\\ProjectDir\\\\ExistingMyProject.L5K\" \"C:\\\\ProjectDir\\\\NotYetExistingMyProject.L5X\" False",
      "code": "import asyncio\nimport sys\nfrom logix_designer_sdk import LogixProject, StdOutEventLogger\nasync def main():\n    if len(sys.argv) != 4:\n        print(\n        )\n        sys.exit(1)\n    existing_file_path = sys.argv[1]\n    new_file_path = sys.argv[2]\n    detailed_l5x = sys.argv[3].lower() == \"true\"\n    project = await LogixProject.open_logix_project(\n        existing_file_path, StdOutEventLogger()\n    )\n    await project.save_as(new_file_path, True, detailed_l5x)\n    print(f\"Project has been saved to: {new_file_path}.\")\nif __name__ == \"__main__\":\n    asyncio.run(main())",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Examples\\open_and_save_file.py",
      "category": "Python Examples",
      "related_methods": [
        "save_as",
        "open_logix_project"
      ]
    },
    "py_partial_export_offline": {
      "title": "Python Example: Partial Export Offline",
      "description": "This is an example Logix Designer SDK customer application.\nIt allows the user to export chosen component to file in L5X format.\nThe user will provide three arguments:\n    1) Full path for the Logix Designer project file.\n    2) XPath to object or objects which should be exported.\n    3) Full path to target file.\n\nExample:\npython partial_export_offline.py \"C:\\\\ProjectDir\\\\MyProject.ACD\" \"Controller/Programs/Program[@Name='MainProgram']\" \"C:\\\\TargetXmlDir\\\\MyProgram.L5X\"\npython partial_export_offline.py \"C:\\\\ProjectDir\\\\MyProject.L5K\" \"Controller/Programs/Program[@Name='MainProgram']/Routines/Routine[@Name='MainRoutine']/RLLContent/Rung[@Number>='1'][@Number<='2']\" \"C:\\\\TargetXmlDir\\\\RungRange.L5X\"",
      "code": "import asyncio\nimport sys\nfrom logix_designer_sdk import LogixProject, StdOutEventLogger\nasync def main():\n    if len(sys.argv) != 4:\n        print(\n        )\n        sys.exit(1)\n    existing_file_path = sys.argv[1]\n    x_path = sys.argv[2]\n    export_path = sys.argv[3]\n    project = await LogixProject.open_logix_project(\n        existing_file_path, StdOutEventLogger()\n    )\n    await project.partial_export_to_xml_file(x_path, export_path)\n    print(\"Partial export was successful\")\nif __name__ == \"__main__\":\n    asyncio.run(main())",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Examples\\partial_export_offline.py",
      "category": "Python Examples",
      "related_methods": [
        "partial_export_to_xml_file",
        "open_logix_project"
      ]
    },
    "py_partial_import_offline": {
      "title": "Python Example: Partial Import Offline",
      "description": "This is an example Logix Designer SDK customer application.\nIt allows the user to import chosen component from file in L5X format.\nThe user will provide three arguments:\n    1) Full path for the Logix Designer project file.\n    2) XPath to object or objects which should be imported.\n    3) Full path to source file.\n\nExample:\npython partial_import_offline.py \"C:\\\\ProjectDir\\\\MyProject.ACD\" \"Controller/Programs/Program[@Name='MainProgram']\" \"C:\\\\XmlDir\\\\MyProgram.L5X\"\npython partial_import_offline.py \"C:\\\\ProjectDir\\\\MyProject.L5K\" \"Controller/Programs/Program[@Name='MainProgram']/Routines/Routine[@Name='MainRoutine']/RLLContent/Rung[@Number>='1'][@Number<='2']\" \"C:\\\\XmlDir\\\\RungRange.L5X\"",
      "code": "import asyncio\nimport sys\nfrom logix_designer_sdk import ImportCollisionOptions, LogixProject, StdOutEventLogger\nasync def main():\n    if len(sys.argv) != 4:\n        print(\n        )\n        sys.exit(1)\n    existing_file_path = sys.argv[1]\n    x_path = sys.argv[2]\n    xml_file_to_import = sys.argv[3]\n    project = await LogixProject.open_logix_project(\n        existing_file_path, StdOutEventLogger()\n    )\n    await project.partial_import_from_xml_file(\n        x_path, xml_file_to_import, ImportCollisionOptions.OVERWRITE_ON_COLL\n    )\n    await project.save()\n    print(\"Partial import was successful\")\nif __name__ == \"__main__\":\n    asyncio.run(main())",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Examples\\partial_import_offline.py",
      "category": "Python Examples",
      "related_methods": [
        "save",
        "partial_import_from_xml_file",
        "open_logix_project"
      ]
    },
    "py_provision_and_validate": {
      "title": "Python Example: Provision And Validate",
      "description": "This example shows a very basic demo of how to use LogixDesignerSDK to provision a controller and test for expected values.\nThis could be used, for example, to retrieve a project file (.ACD, .L5X, or .L5K) from version control\nand then programatically test on a physical or emulated controller.\nYou could (and likely should) also use libraries like PyTest along with the demo helper class for an even more robust solution.\n\nThis script takes one argument: The file path, and has a hard coded comm path.\nFor examples on taking more than one argument, see CreateDeploymentSdCard.\n\nExample:\npython provision_and_validate.py \"C:\\\\ProjectDir\\\\OldExistingMyProject.L5K\"",
      "code": "import asyncio\nimport sys\nfrom logix_designer_sdk import (\n    LogixProject,\n    OperationMode,\n    RequestedControllerMode,\n    StdOutEventLogger,\n)\nfrom logix_designer_sdk.exceptions import LogixSdkError\nclass ValueMismatchException(Exception):\n    def __init__(self, message: str) -> None:\n        self.message = message\n        super().__init__(self.message)\nclass ProvisionAndValidate:\n    def __init__(self, project: LogixProject) -> None:\n        self.project = project\n        self.tag_mode = OperationMode.ONLINE\n    @staticmethod\n    async def init(file_path: str, comm_path: str):\n        project = await LogixProject.open_logix_project(file_path, StdOutEventLogger())\n        await project.set_communications_path(comm_path)\n        await project.change_controller_mode(RequestedControllerMode.PROGRAM)\n        await project.download()\n        await project.change_controller_mode(RequestedControllerMode.RUN)\n        return ProvisionAndValidate(project)\n    async def string_value_matches(self, tag_path: str, expected_value: str) -> bool:\n        try:\n            actual_value = await self.project.get_tag_value_string(\n                tag_path, self.tag_mode\n            )\n            valuesMatch = expected_value == actual_value\n            if not valuesMatch:\n                raise ValueMismatchException(\n                    f\"Value ${tag_path} did not match. Actual: ${actual_value} Expected: ${expected_value}\"\n                )\n            return valuesMatch\n        except LogixSdkError:\n            print(f\"Something went wrong trying to get tag value ${tag_path}.\")\n            raise\n    async def dint_value_matches(self, tag_path: str, expected_value: int) -> bool:\n        try:\n            actual_value = await self.project.get_tag_value_dint(\n                tag_path, self.tag_mode\n            )\n            valuesMatch = expected_value == actual_value\n            if not valuesMatch:\n                raise ValueMismatchException(\n                    f\"Value ${tag_path} did not match. Actual: ${actual_value} Expected: ${expected_value}\"\n                )\n            return valuesMatch\n        except LogixSdkError:\n            print(f\"Something went wrong trying to get tag value ${tag_path}.\")\n            raise\ndef create_tag_path_from_name(name: str) -> str:\n    tagPathPrefix = \"Controller/Tags/Tag[@Name='\"\n    tagPathSuffix = \"']\"\n    return f\"{tagPathPrefix}{name}{tagPathSuffix}\"\nasync def main():\n    if len(sys.argv) != 2:\n        print(f\"Usage: python {sys.argv[0]} projectFilePath\")\n        sys.exit(1)\n    failed_tests = 0\n    project_file_path = sys.argv[1]\n    comm_path = r\"EmulateEthernet\\ip_address\"\n    project_to_test = await ProvisionAndValidate.init(project_file_path, comm_path)\n    string_tag_path = create_tag_path_from_name(\"myString\")\n    dint_tag_path = create_tag_path_from_name(\"myDint\")\n    try:\n        await project_to_test.string_value_matches(string_tag_path, \"expectedValue\")\n    except:\n        failed_tests += 1\n    try:\n        await project_to_test.dint_value_matches(dint_tag_path, 42)\n    except:\n        failed_tests += 1\n    if failed_tests == 0:\n        print(\"All tests passed!!!\")\n        sys.exit(0)\n    else:\n        print(f\"There were {failed_tests} failed tests.\")\n        sys.exit(1)\nif __name__ == \"__main__\":\n    asyncio.run(main())",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Examples\\provision_and_validate.py",
      "category": "Python Examples",
      "related_methods": [
        "set_communications_path",
        "change_controller_mode",
        "open_logix_project",
        "download"
      ]
    },
    "py_read_controller_mode": {
      "title": "Python Example: Read Controller Mode",
      "description": "This is an example Logix Designer SDK customer application.\nIt allows the user to read current controller mode.\nThe user will provide two arguments:\n    1) Full path for the Logix Designer project file.\n    2) Communications path for the controller whose mode we wish to read.\nExample:\npython read_controller_mode.py \"C:\\\\ProjectDir\\\\MyProject.ACD\" \"AB_ETH-1\\\\10.88.45.25\\\\Backplane\\\\0\"\npython read_controller_mode.py \"C:\\\\ProjectDir\\\\MyProject.L5X\" \"EmulateEthernet\\\\127.0.0.1\"",
      "code": "import asyncio\nimport sys\nfrom logix_designer_sdk import ControllerMode, LogixProject, StdOutEventLogger\ncontroller_mode_map = {\n    ControllerMode.FAULTED: \"Faulted\",\n    ControllerMode.PROGRAM: \"Program\",\n    ControllerMode.RUN: \"Run\",\n    ControllerMode.TEST: \"Test\",\n}\nasync def main():\n    if len(sys.argv) != 3:\n        print(f\"Usage: {sys.argv[0]} projectFilePath commPath\")\n        sys.exit(1)\n    project_path = sys.argv[1]\n    comm_path = sys.argv[2]\n    project = await LogixProject.open_logix_project(project_path, StdOutEventLogger())\n    await project.set_communications_path(comm_path)\n    controller_mode = await project.read_controller_mode()\n    result = controller_mode_map[controller_mode]\n    project.close()\n    print(f\"Controller mode: {result}\")\nif __name__ == \"__main__\":\n    asyncio.run(main())",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Examples\\read_controller_mode.py",
      "category": "Python Examples",
      "related_methods": [
        "set_communications_path",
        "read_controller_mode",
        "open_logix_project"
      ]
    },
    "py_safety_lock_unlock": {
      "title": "Python Example: Safety Lock Unlock",
      "description": "This is an example Logix Designer SDK customer application.\nCode example below presents how to operate with safety lock/unlock and how to set, modify and remove\nSafety lock/unlock passwords.\nThe user can choose desired action.\nThe user will provide from two to four arguments:\n    - a full path to a project file to update\n    - requested_operation: 0 for check SafetyLock status, 1 for SafetyLock, 2 for SafetyUnlock, 3 for erase SafetyLock password,\n                           4 for erase SafetyUnlock password, 5 for change SafetyLock password, 6 for change SafetyUnlock password\n    - password: for 1-6 operations.\n    - new password: for 5-6 operations.\nExample:\npython safety_lock_unlock.py \"C:\\\\Users\\\\Public\\\\Documents\\\\Studio 5000\\\\Projects\\\\MyProj.ACD\" requested_operation\n                    [optional: password for 1-6 operations] [optional: new password for 5-6 operations]\nNote: Passing empty password in powershell looks as follows: '\"\"'",
      "code": "import asyncio\nimport sys\nfrom enum import Enum\nfrom logix_designer_sdk import LogixProject, StdOutEventLogger\ndef print_usage_and_exit():\n    operation types\n    Check safety lock status\n    safety lock project\n    Safety unlock project\n    Change safety lock password\n    change safety unlock password\n    The main method",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Examples\\safety_lock_unlock.py",
      "category": "Python Examples",
      "related_methods": [
        "safety_unlock",
        "set_safety_lock_password",
        "open_logix_project",
        "is_safety_locked",
        "save",
        "set_safety_unlock_password",
        "safety_lock"
      ]
    },
    "py_set_comm_path": {
      "title": "Python Example: Set Comm Path",
      "description": "This is an example Logix Designer SDK customer application.\nIt sets the project communications path in a Logix Designer project\nand takes two arguments\n    - a full path to a project file to update\n    - the communications path to update the project to\n\nExample:\npython set_comm_path.py \"C:/Users/BRubble/Documents/Studio 5000/Projects/MyProj.ACD\" AB_ETH-1\\10.88.44.99",
      "code": "import asyncio\nimport sys\nfrom logix_designer_sdk import LogixProject, StdOutEventLogger\nasync def main():\n    if len(sys.argv) != 3:\n        print(f\"Usage: python {sys.argv[0]} projectFilePath commPath\")\n        sys.exit(1)\n    project_path = sys.argv[1]\n    comm_path = sys.argv[2]\n    project = await LogixProject.open_logix_project(project_path, StdOutEventLogger())\n    await project.set_communications_path(comm_path)\n    await project.save()\n    project.close()\n    print(\"Communications path was set.\")\nif __name__ == \"__main__\":\n    asyncio.run(main())",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Examples\\set_comm_path.py",
      "category": "Python Examples",
      "related_methods": [
        "set_communications_path",
        "save",
        "open_logix_project"
      ]
    },
    "py_set_tag_value": {
      "title": "Python Example: Set Tag Value",
      "description": "This is an example Logix Designer SDK customer application.\nIt sets a controller tag of DINT type in a Logix Designer project\nand takes three arguments\n    - a full path to a project file\n    - a tag name\n    - an integer tag value\nExample:\npython set_tag_value.py \"C:\\\\Users\\\\BRubble\\\\Documents\\\\Studio 5000\\\\Projects\\\\MyProj.ACD\" my_tag 123",
      "code": "import asyncio\nimport sys\nfrom logix_designer_sdk import LogixProject, OperationMode, StdOutEventLogger\nasync def main():\n    if len(sys.argv) != 4:\n        print(f\"Usage: python {sys.argv[0]} projectFilePath tagName tagValue\")\n        sys.exit(1)\n    project_path = sys.argv[1]\n    tag_name = sys.argv[2]\n    tag_value = int(sys.argv[3])\n    project = await LogixProject.open_logix_project(project_path, StdOutEventLogger())\n    tag_path = f\"Controller/Tags/Tag[@Name='{tag_name}']\"\n    await project.set_tag_value_dint(\n        tag_path=tag_path, mode=OperationMode.OFFLINE, tag_value=tag_value\n    )\n    print(\"Tag value was set.\")\n    await project.save()\nif __name__ == \"__main__\":\n    asyncio.run(main())",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Examples\\set_tag_value.py",
      "category": "Python Examples",
      "related_methods": [
        "save",
        "set_tag_value_dint",
        "open_logix_project"
      ]
    },
    "py_single_acd_many_controller_download": {
      "title": "Python Example: Single Acd Many Controller Download",
      "description": "This class shows how to create a static class which could be referenced by a program.\n\nThis class associates multiple controller comm paths with a single ACD file,\nthen exposes a method which will open the projects and initiate downloads in series.\n\nIt then saves those projects into a dictionary, using the comm path as the key for the opened \"LogixProject\" instances\n\n\nIf you instead wanted to download in parallel, see the many_acd_many_controller_download.py example.\n\nIf you want to see how to reference a class in your main program,\nsee the examples create_deployment_sd_card or provision_and_validate.",
      "code": "import asyncio\nfrom typing import Dict\nfrom logix_designer_sdk import StdOutEventLogger\nfrom logix_designer_sdk.logix_project import (\n    LogixProject,\n    OperationMode,\n    RequestedControllerMode,\n)\nclass DownloadCtrl:\n    file_path = r\"C:\\Path\\To\\Project.acd\"\n    controller_comm_paths = [\n        r\"AB_ETH-1\\ip_address\\Backplane\\91\",\n        r\"AB_ETH-1\\ip_address\\Backplane\\92\",\n        r\"AB_ETH-1\\ip_address\\Backplane\\93\",\n        r\"AB_ETH-1\\ip_address\\Backplane\\94\",\n        r\"AB_ETH-1\\ip_address\\Backplane\\95\",\n    ]\n    logix_sdk_projects: Dict[str, LogixProject] = {}\n    @staticmethod\n    async def download_to_multiple_controllers() -> None:\n        programMode = RequestedControllerMode.PROGRAM\n        runMode = RequestedControllerMode.RUN\n        for controller in DownloadCtrl.controller_comm_paths:\n            logix_project = await LogixProject.open_logix_project(\n                DownloadCtrl.file_path, StdOutEventLogger()\n            )\n            await logix_project.set_communications_path(controller)\n            await logix_project.change_controller_mode(programMode)\n            await logix_project.download()\n            await logix_project.change_controller_mode(runMode)\n            DownloadCtrl.logix_sdk_projects[controller] = logix_project\n        tag_path = \"Controller/Tags/Tag[@Name='someBool']\"\n        ctrl1 = next(iter(DownloadCtrl.logix_sdk_projects))\n        ctrl1_project = DownloadCtrl.logix_sdk_projects[ctrl1]\n        if await ctrl1_project.get_tag_value_bool(tag_path, OperationMode.ONLINE):\n            pass\nasyncio.run(DownloadCtrl.download_to_multiple_controllers())",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Examples\\single_acd_many_controller_download.py",
      "category": "Python Examples",
      "related_methods": [
        "download",
        "open_logix_project",
        "change_controller_mode",
        "get_tag_value_bool",
        "set_communications_path"
      ]
    },
    "py_store_image_on_sd_card": {
      "title": "Python Example: Store Image On Sd Card",
      "description": "This is an example Logix Designer SDK customer application.\nIt allows the user to store image on SD card.\nStore to SD card functionality is supported since version 34.\nThe user will provide two or seven arguments.\n7 argumnet option supported since version 37.\n    1) Full path for the Logix Designer project file.\n    2) Communications path for the controller that mode change is requested.\n\n    OPTIONAL:\n    3) A number corresponding to the event which triggers the image to load from SD to the controller:\n    0 - On demand only\n    2 - On corrupt ram/uninitialized memory\n    3 - On Power up.\n\n    4) A number corresponding to the mode of the controller upon SD card image load:\n    0 - Run mode\n    1 - Program Mode\n\n    5) A string corresponding to the Automatic Firmware Update setting\n    Enabled\n    Disabled\n\n    6) A name for the SD card image, max Length 40 characters\n\n    7) A note for the SD card image, max length 87 characters\n\nExamples:\npython store_image_on_sd_card.py \"C:\\\\ProjectDir\\\\MyProject.ACD\" AB_ETH-1\\\\10.88.45.25\\\\Backplane\\\\0\npython store_image_on_sd_card.py \"C:\\\\ProjectDir\\\\MyProject.ACD\" AB_ETH-1\\\\10.88.45.25\\\\Backplane\\\\0 2 0 \"Disabled\" \"Backup_Image\" \"This image was created prior to the system update\"",
      "code": "import asyncio\nimport sys\nfrom logix_designer_sdk import (\n    AutomaticFirmwareUpdate,\n    LogixProject,\n    RequestedControllerMode,\n    RequestedLoadEvent,\n    RequestedLoadMode,\n    StdOutEventLogger,\n)\nasync def main():\n    arg_length = len(sys.argv)\n    if arg_length != 3 and arg_length != 8:\n        print(\n            \"Usage: StoreImageOnSDCard projectFilePath commPath [loadEvent loadMode afuSetting, imageName, imageNote]\"\n        )\n        sys.exit(1)\n    project_path = sys.argv[1]\n    comm_path = sys.argv[2]\n    load_event: int = None\n    load_mode: int = None\n    afu_setting = None\n    image_name = None\n    image_note = None\n    if arg_length == 8:\n        load_event = int(sys.argv[3])\n        load_mode = int(sys.argv[4])\n        afu_setting = sys.argv[5]\n        image_name = sys.argv[6]\n        image_note = sys.argv[7]\n    project = await LogixProject.open_logix_project(project_path, StdOutEventLogger())\n    await project.set_communications_path(comm_path)\n    await project.download()\n    await project.change_controller_mode(RequestedControllerMode.PROGRAM)\n    if load_event is None:\n        await project.store_image_on_sd_card()\n        print(\"Project was successfully stored on SD card.\")\n        sys.exit(0)\n    if load_event == 0:\n        event_to_set = RequestedLoadEvent.ON_DEMAND_ONLY\n    elif load_event == 2:\n        event_to_set = RequestedLoadEvent.ON_CORRUPT_RAM\n    elif load_event == 3:\n        event_to_set = RequestedLoadEvent.ON_POWER_UP\n    else:\n        print(\n            f\"Invalid load event. Valid values are 0 (On Demand Only), 2 (On Corrupt RAM), or 3 (On Power Up). Argument provided was {load_event}\"\n        )\n        sys.exit(1)\n    if load_mode == 0:\n        mode_to_set = RequestedLoadMode.RUN\n    elif load_mode == 1:\n        mode_to_set = RequestedLoadMode.PROGRAM\n    else:\n        print(\n            f\"Invalid load mode. Valid values are 0 (Run) or 1 (Program). Argument provided was {load_mode}\"\n        )\n        sys.exit(1)\n    if afu_setting.lower() == \"enabled\":\n        requested_afu_setting = AutomaticFirmwareUpdate.ENABLED\n    elif afu_setting.lower() == \"disabled\":\n        requested_afu_setting = AutomaticFirmwareUpdate.DISABLED\n    else:\n        print(\n            f'Invalid afuSetting. Valid values are \"Enabled\" or \"Disabled\". Argument provided was \"{afu_setting}\"'\n        )\n        sys.exit(1)\n    await project.store_image_on_sd_card(\n        event_to_set, mode_to_set, requested_afu_setting, image_name, image_note\n    )\n    print(\"Project was successfully stored on SD card with options specified.\")\n    sys.exit(0)\nif __name__ == \"__main__\":\n    asyncio.run(main())",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Examples\\store_image_on_sd_card.py",
      "category": "Python Examples",
      "related_methods": [
        "open_logix_project",
        "change_controller_mode",
        "download",
        "store_image_on_sd_card",
        "set_communications_path"
      ]
    },
    "py_upload_project": {
      "title": "Python Example: Upload Project",
      "description": "This is an example Logix Designer SDK customer application.\nIt allows the user to upload a Logix Designer project file from a controller.\nThe user will provide two arguments:\n    1) Full path for the Logix Designer project file\n    2) Communications path for the controller targeted for the Upload\n\nExample:\npython upload_project.py \"C:\\\\ProjectDir\\\\MyProject.ACD\" AB_ETH-1\\\\10.88.45.25\\\\Backplane\\\\0",
      "code": "import asyncio\nimport sys\nfrom logix_designer_sdk import LogixProject, StdOutEventLogger\nasync def main():\n    if len(sys.argv) != 3:\n        print(f\"Usage: python {sys.argv[0]} projectFilePath commPath\")\n        sys.exit(1)\n    project_path = sys.argv[1]\n    comm_path = sys.argv[2]\n    project = await LogixProject.open_logix_project(project_path, StdOutEventLogger())\n    await project.set_communications_path(comm_path)\n    await project.upload()\n    await project.save()\n    print(f\"projectPath = {project_path}\")\n    print(f\"controllerPath = {comm_path}\")\n    print(\"Upload DONE.\")\n    sys.exit(0)\nif __name__ == \"__main__\":\n    asyncio.run(main())",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Examples\\upload_project.py",
      "category": "Python Examples",
      "related_methods": [
        "upload",
        "set_communications_path",
        "save",
        "open_logix_project"
      ]
    },
    "py_upload_to_new_project": {
      "title": "Python Example: Upload To New Project",
      "description": "This is an example Logix Designer SDK customer application.\nIt allows the user to upload a Logix Designer project file from a controller.\nThe user will provide two arguments:\n    1) Full path for the Logix Designer project file that will be created.\n    2) Communications path for the controller targeted for the Upload.\n\nExample:\npython upload_to_new_project.py \"C:\\\\ProjectDir\\\\NotYetExistingMyProject.ACD\" AB_ETH-1\\\\10.88.45.25\\\\Backplane\\\\0",
      "code": "import asyncio\nimport sys\nfrom logix_designer_sdk import LogixProject, StdOutEventLogger\nasync def main():\n    if len(sys.argv) != 3:\n        print(f\"Usage: python {sys.argv[0]} newProjectPath commPath\")\n        sys.exit(1)\n    new_project_path = sys.argv[1]\n    comm_path = sys.argv[2]\n    _ = await LogixProject.upload_to_new_project(\n        new_project_path, comm_path, StdOutEventLogger()\n    )\n    print(f\"newProjectPath = {new_project_path}\")\n    print(f\"controllerPath = {comm_path}\")\n    print(\"Upload To New Project DONE.\")\nif __name__ == \"__main__\":\n    asyncio.run(main())",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Examples\\upload_to_new_project.py",
      "category": "Python Examples",
      "related_methods": [
        "upload_to_new_project"
      ]
    },
    "getting_started_0": {
      "title": "Getting Started Example 1",
      "description": "Preparing the environment",
      "code": "cd 'C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Examples'\npython -m venv ./.venv\n.\\.venv\\Scripts\\activate",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\PythonGettingStarted.html",
      "category": "Getting Started",
      "related_methods": []
    },
    "getting_started_1": {
      "title": "Getting Started Example 2",
      "description": "Preparing the environment",
      "code": "pip install -r .\\requirements.txt",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\PythonGettingStarted.html",
      "category": "Getting Started",
      "related_methods": []
    },
    "getting_started_2": {
      "title": "Getting Started Example 3",
      "description": "Preparing the environment",
      "code": "python .\\get_comm_path.py C:\\myAcds\\myAcdFile.ACD",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\PythonGettingStarted.html",
      "category": "Getting Started",
      "related_methods": []
    },
    "getting_started_3": {
      "title": "Getting Started Example 4",
      "description": "For more information, see the Pip documentation on the Requirements File Format which can be found here: https://pip.pypa.io/en/stable/reference/requirements-file-format/",
      "code": "pip install .\\path\\to\\logix_designer_sdk-2.0.1-py3-none-any.whl",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\PythonGettingStarted.html",
      "category": "Getting Started",
      "related_methods": []
    },
    "getting_started_4": {
      "title": "Getting Started Example 5",
      "description": "Navigate to SDK python client install and make/activate a virtual environment",
      "code": "cd 'C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\'\npython -m venv .\\.venv",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\PythonGettingStarted.html",
      "category": "Getting Started",
      "related_methods": []
    },
    "getting_started_5": {
      "title": "Getting Started Example 6",
      "description": "Activate the virtual environment",
      "code": ".\\.venv\\Scripts\\activate",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\PythonGettingStarted.html",
      "category": "Getting Started",
      "related_methods": []
    },
    "getting_started_6": {
      "title": "Getting Started Example 7",
      "description": "Use Pip to install the SDK",
      "code": "pip install .\\logix_designer_sdk-2.0.1-py3-none-any.whl",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\PythonGettingStarted.html",
      "category": "Getting Started",
      "related_methods": []
    },
    "getting_started_7": {
      "title": "Getting Started Example 8",
      "description": "Enter asyncio Python interpreter",
      "code": "python -m asyncio",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\PythonGettingStarted.html",
      "category": "Getting Started",
      "related_methods": []
    },
    "getting_started_8": {
      "title": "Getting Started Example 9",
      "description": "Execute some python SDK code",
      "code": "from logix_designer_sdk.logix_project import LogixProject\nproject = await LogixProject.open_logix_project(r\"C:\\myAcds\\myAcd.ACD\", StdOutEventLogger())\nawait project.set_communications_path(\"a/known/communication/path\")\nawait project.get_communications_path()\n'a/known/communication/path'",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\PythonGettingStarted.html",
      "category": "Getting Started",
      "related_methods": [
        "set_communications_path",
        "open_logix_project",
        "get_communications_path"
      ]
    },
    "overview_index": {
      "title": "Logix Designer SDK: Logix Designer SDK Overview - Python",
      "description": "SDK Overview Documentation",
      "code": "The Python Client Library is asynchronous and returns a Task which can be awaited. This is a major difference between the C++ and C# Client Libraries. If it is important for your program that a step be completed before moving on (most use cases) you must use the await keyword. See the asyncio library reference on asynchronous operations for examples: https://docs.python.org/3/library/asyncio.html. The Client Application may interact with more than just one project at a time by creating/opening more than one project as needed. All symbols in the interface used by the Client Application will be in the namespace logix_designer_sdk.logix_project.LogixProject. The main interface is a class that encapsulates an open project. Its full name is logix_designer_sdk.logix_project.LogixProject.",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\index.html",
      "category": "Documentation",
      "related_methods": []
    },
    "overview_LogixProjectPage": {
      "title": "Logix Designer SDK: Logix Project",
      "description": "SDK Overview Documentation",
      "code": "Perform operations on a Logix Designer project file. Use the LogixProject class to perform operations on a Logix Designer project file. When you use this class, the project file is sent to the server side of the Logix Designer SDK and the client-side project file is left untouched until the Save operation is complete. All project operations are related only to the server-side project instance until the Save is complete. Another user could be updating the project file on another workstation, and that work could be overwritten by a Save. You can design the Client Application to prevent overwriting work on the client side by, for example, allowing only one application at a time to work on a project file. The typical Client Application has no way to recover when an operation fails. A Client Application generally stops processing on a project when an error occurs. Every operation stops execution by throwing an exception for any failure. The exception, raised when the Logix Designer Services operation failed, includes the translated string corresponding to the error code. This exception type indicates that the operation was executed but failed.",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\LogixProjectPage.html",
      "category": "Documentation",
      "related_methods": []
    },
    "overview_Logix": {
      "title": "Logix Designer SDK: Designer SDK Overview - General",
      "description": "SDK Overview Documentation",
      "code": "Use the Logix Designer SDK to develop C++, C#, or Python applications -such as a CLI tool- that provide operations and commands to supplement features in the Logix Designer application. This reference documentation contains details for each implementation. Applications you develop could provide commands such as project upload/download, controller mode change, and store or load from an SD card. The Logix Designer SDK contains:",
      "file_path": "C:\\Users\\Public\\Documents\\Studio 5000\\Logix Designer SDK\\python\\Documentation\\Logix.html",
      "category": "Documentation",
      "related_methods": []
    }
  }
}